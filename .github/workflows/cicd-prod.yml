name: Build and Deploy tapes-2-digital backend (Prod.)
on:
  push:
    branches:
      - prod
  workflow_dispatch:

jobs:
  build_and_push:
    name: Build and Push
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: latest-prod
    
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master

      - name: Authenticate GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker australia-southeast2-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          docker build \
            --build-arg APP_URL="${{ vars.APP_URL_PROD }}" \
            --build-arg DATABASE_URL="${{ secrets.DATABASE_URL_PROD }}" \
            --build-arg CLIENT_APP_URL="${{ vars.CLIENT_APP_URL_PROD }}" \
            --build-arg GOOGLE_CLIENT_ID="${{ vars.GOOGLE_CLIENT_ID }}" \
            --build-arg GOOGLE_PROJECT_ID="${{ vars.GOOGLE_PROJECT_ID }}" \
            --build-arg GOOGLE_PLACES_API_KEY="${{ secrets.GOOGLE_PLACES_API_KEY }}" \
            --build-arg GOOGLE_BUCKET_NAME="${{ vars.GOOGLE_BUCKET_NAME }}" \
            --build-arg SPACE_DIR="${{ vars.SPACE_DIR_PROD }}" \
            --build-arg WISE_API_KEY="${{ secrets.WISE_API_KEY }}" \
            --build-arg WISE_API_KEY_UK="${{ secrets.WISE_API_KEY_UK }}" \
            --build-arg WISE_API_KEY_AU="${{ secrets.WISE_API_KEY_AU }}" \
            --build-arg WISE_API_URL="${{ vars.WISE_API_URL }}" \
            --build-arg OUTSCRAPER_API_KEY="${{ secrets.OUTSCRAPER_API_KEY }}" \
            --build-arg HUBSPOT_APP_TOKEN="${{ secrets.HUBSPOT_APP_TOKEN }}" \
            --build-arg HUBSPOT_API_URL="${{ vars.HUBSPOT_API_URL }}" \
            --build-arg STRIPE_SECRET_KEY_AU="${{ secrets.STRIPE_SECRET_KEY_AU }}" \
            --build-arg STRIPE_PUBLISHABLE_KEY_AU="${{ secrets.STRIPE_PUBLISHABLE_KEY_AU }}" \
            --build-arg STRIPE_WEBHOOK_SECRET_AU="${{ secrets.STRIPE_WEBHOOK_SECRET_AU }}" \
            --build-arg STRIPE_SECRET_KEY_UK="${{ secrets.STRIPE_SECRET_KEY_UK }}" \
            --build-arg STRIPE_PUBLISHABLE_KEY_UK="${{ secrets.STRIPE_PUBLISHABLE_KEY_UK }}" \
            --build-arg STRIPE_WEBHOOK_SECRET_UK="${{ secrets.STRIPE_WEBHOOK_SECRET_UK }}" \
            --build-arg GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --build-arg NODE_TLS_REJECT_UNAUTHORIZED=0 \
            -t australia-southeast2-docker.pkg.dev/tapes-to-digital-main-system/tapes-2-digital-repo/app:$IMAGE_TAG .
          docker push australia-southeast2-docker.pkg.dev/tapes-to-digital-main-system/tapes-2-digital-repo/app:$IMAGE_TAG
      
  deploy:
    name: deploy to GCP
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH for EC2
        env:
          EC2_USER: ${{ secrets.SSH_USERNAME }}
          EC2_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy deploy scripts to EC2
        env:
          EC2_USER: ${{ secrets.SSH_USERNAME }}
          EC2_HOST: ${{ secrets.SSH_HOST }}
        run: |
          scp -o StrictHostKeyChecking=no deploy_scripts/*.sh $EC2_USER@$EC2_HOST:~/

      - name: Execute deploy script on EC2
        env:
          REGION: australia-southeast2-docker.pkg.dev
          PROJECTID: tapes-to-digital-main-system
          REPOSITORY: tapes-2-digital-repo
          IMAGE: app
          IMAGE_TAG: latest-prod
          HOST_PORT: 3007
          ENVIRONMENT: prod
          EC2_USER: ${{ secrets.SSH_USERNAME }}
          EC2_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            chmod +x ~/deploy.sh
            ~/deploy.sh $REGION $PROJECTID $REPOSITORY $IMAGE $IMAGE_TAG $HOST_PORT $ENVIRONMENT
          EOF

      - name: Clean up unused images on EC2
        env:
          EC2_USER: ${{ secrets.SSH_USERNAME }}
          EC2_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            sudo docker system prune -f
          EOF
